import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  TextInput,
  StyleSheet,
  TouchableOpacity,
  Alert,
} from "react-native";
import { useRouter, useLocalSearchParams } from "expo-router";
import { firestore } from "../firebaseConfig";
import { collection, getDocs, doc, setDoc, getDoc } from "firebase/firestore";
import { globalStyles } from "../styles/globalStyles"; // Importando o CSS
import Loading from "../components/Loading"; // Importando o componente Loading
import { recuperarDadosDemograficos } from "../utils/dadosDemograficos"; // Importando a fun√ß√£o reutiliz√°vel
import { MaterialIcons } from "@expo/vector-icons";
import { Picker } from "@react-native-picker/picker";

const paisesComCodigo = [
  { nome: "Afeganist√£o", codigo: "Afeganist√£o (+93)", bandeira: "üá¶üá´" },
  { nome: "√Åfrica do Sul", codigo: "√Åfrica do Sul (+27)", bandeira: "üáøüá¶" },
  { nome: "Alb√¢nia", codigo: "Alb√¢nia (+355)", bandeira: "üá¶üá±" },
  { nome: "Alemanha", codigo: "Alemanha (+49)", bandeira: "üá©üá™" },
  { nome: "Andorra", codigo: "Andorra (+376)", bandeira: "üá¶üá©" },
  { nome: "Angola", codigo: "Angola (+244)", bandeira: "üá¶üá¥" },
  { nome: "Argentina", codigo: "Argentina (+54)", bandeira: "üá¶üá∑" },
  { nome: "Austr√°lia", codigo: "Austr√°lia (+61)", bandeira: "üá¶üá∫" },
  { nome: "√Åustria", codigo: "√Åustria (+43)", bandeira: "üá¶üáπ" },
  { nome: "B√©lgica", codigo: "B√©lgica (+32)", bandeira: "üáßüá™" },
  { nome: "Bol√≠via", codigo: "Bol√≠via (+591)", bandeira: "üáßüá¥" },
  { nome: "Brasil", codigo: "Brasil (+55)", bandeira: "üáßüá∑" },
  { nome: "Canad√°", codigo: "Canad√° (+1)", bandeira: "üá®üá¶" },
  { nome: "Chile", codigo: "Chile (+56)", bandeira: "üá®üá±" },
  { nome: "China", codigo: "China (+86)", bandeira: "üá®üá≥" },
  { nome: "Col√¥mbia", codigo: "Col√¥mbia (+57)", bandeira: "üá®üá¥" },
  { nome: "Coreia do Sul", codigo: "Coreia do Sul (+82)", bandeira: "üá∞üá∑" },
  { nome: "Costa Rica", codigo: "Costa Rica (+506)", bandeira: "üá®üá∑" },
  { nome: "Dinamarca", codigo: "Dinamarca (+45)", bandeira: "üá©üá∞" },
  { nome: "Egito", codigo: "Egito (+20)", bandeira: "üá™üá¨" },
  { nome: "Espanha", codigo: "Espanha (+34)", bandeira: "üá™üá∏" },
  { nome: "Estados Unidos", codigo: "EUA (+1)", bandeira: "üá∫üá∏" },
  { nome: "Fran√ßa", codigo: "Fran√ßa (+33)", bandeira: "üá´üá∑" },
  { nome: "Gr√©cia", codigo: "Gr√©cia (+30)", bandeira: "üá¨üá∑" },
  { nome: "Holanda", codigo: "Holanda (+31)", bandeira: "üá≥üá±" },
  { nome: "√çndia", codigo: "√çndia (+91)", bandeira: "üáÆüá≥" },
  { nome: "Inglaterra", codigo: "Inglaterra (+44)", bandeira: "üá¨üáß" },
  { nome: "Irlanda", codigo: "Irlanda (+353)", bandeira: "üáÆüá™" },
  { nome: "It√°lia", codigo: "It√°lia (+39)", bandeira: "üáÆüáπ" },
  { nome: "Jap√£o", codigo: "Jap√£o (+81)", bandeira: "üáØüáµ" },
  { nome: "M√©xico", codigo: "M√©xico (+52)", bandeira: "üá≤üáΩ" },
  { nome: "Mo√ßambique", codigo: "Mo√ßambique (+258)", bandeira: "üá≤üáø" },
  { nome: "Noruega", codigo: "Noruega (+47)", bandeira: "üá≥üá¥" },
  { nome: "Nova Zel√¢ndia", codigo: "Nova Zel√¢ndia (+64)", bandeira: "üá≥üáø" },
  { nome: "Paraguai", codigo: "Paraguai (+595)", bandeira: "üáµüáæ" },
  { nome: "Peru", codigo: "Peru (+51)", bandeira: "üáµüá™" },
  { nome: "Pol√¥nia", codigo: "Pol√¥nia (+48)", bandeira: "üáµüá±" },
  { nome: "Portugal", codigo: "Portugal (+351)", bandeira: "üáµüáπ" },
  { nome: "Reino Unido", codigo: "Reino Unido (+44)", bandeira: "üá¨üáß" },
  { nome: "R√∫ssia", codigo: "R√∫ssia (+7)", bandeira: "üá∑üá∫" },
  { nome: "Su√©cia", codigo: "Su√©cia (+46)", bandeira: "üá∏üá™" },
  { nome: "Su√≠√ßa", codigo: "Su√≠√ßa (+41)", bandeira: "üá®üá≠" },
  { nome: "Turquia", codigo: "Turquia (+90)", bandeira: "üáπüá∑" },
  { nome: "Ucr√¢nia", codigo: "Ucr√¢nia (+380)", bandeira: "üá∫üá¶" },
  { nome: "Uruguai", codigo: "Uruguai (+598)", bandeira: "üá∫üáæ" },
  { nome: "Venezuela", codigo: "Venezuela (+58)", bandeira: "üáªüá™" },
];


const InserirAluno = () => {
  const router = useRouter();
  const { turmaId, palestraId, alunoId } = useLocalSearchParams();
  const [nome, setNome] = useState("");
  const [whatsapp, setWhatsapp] = useState("");
  const [loading, setLoading] = useState(false); // Estado para mostrar o loading
  const [codigoPais, setCodigoPais] = useState(""); // C√≥digo padr√£o Brasil
  //console.log (turmaId, palestraId, alunoId);


  // Fun√ß√£o para carregar os dados do aluno do banco de dados
  const carregarDadosAluno = async () => {
    const { pais, estado, lumisial } = await recuperarDadosDemograficos();
    // Montar o caminho no Firestore
    const caminhoFirestore = `paises/${pais}/estados/${estado}/lumisial/${lumisial}`;
    if (turmaId == "" || alunoId == "") {
      console.error(
        "Erro",
        "IDs de turma e aluno s√£o obrigat√≥rios para carregar os dados."
      );
      return;
    }

    try {
      setLoading(true);

      // Construir o caminho no Firestore para buscar os dados do aluno
      const alunoRef = doc(
        firestore,
        `${caminhoFirestore}/turmas/${turmaId}/alunos/${alunoId}`
      );

      const alunoSnapshot = await getDoc(alunoRef);

      if (alunoSnapshot.exists()) {
        const alunoData = alunoSnapshot.data();
        setNome(alunoData.nome || "");
        setWhatsapp(alunoData.whatsapp || "");
      } else {
        // signicia que eu preciso adicionar ele
        setNome("");
        setWhatsapp("");
        //console.log("Limpamos os campos aluno.");
      }
    } catch (error) {
      console.error("Erro ao carregar dados do aluno:", error);
      //Alert.alert("Erro", "N√£o foi poss√≠vel carregar os dados do aluno.");
    } finally {
      setLoading(false);
    }
  };



  const handleAddAluno = async () => {
    if (!turmaId) {
      console.error(
        "Erro",
        "IDs de turma e palestra s√£o obrigat√≥rios. Verifique as informa√ß√µes."
      );
      return;
    }

    if (!nome.trim() || !whatsapp.trim()) {
      Alert.alert("Erro", "Preencha todos os campos antes de continuar.");
      return;
    }

    // Remover caracteres n√£o num√©ricos e garantir que come√ßa com o c√≥digo do pa√≠s
    const numeroFormatado = whatsapp.replace(/\D/g, ""); // Remove qualquer caractere que n√£o seja n√∫mero
    const whatsappCompleto = `${codigoPais.replace(/\D/g, "")}${numeroFormatado}`; // Junta o c√≥digo do pa√≠s ao n√∫mero

    // Valida√ß√£o do WhatsApp
    const regexTelefone = /^\+\d{1,3}\d{8,15}$/; // Exemplo: +5511999999999
    if (!regexTelefone.test(`+${whatsappCompleto}`)) {
      Alert.alert("Erro", "N√∫mero de WhatsApp inv√°lido. Inclua o c√≥digo do pa√≠s (Ex.: +5511999999999).");
      return;
    }

    try {
      setLoading(true); // Ativa o loading
      const { pais, estado, lumisial } = await recuperarDadosDemograficos();
      const caminhoFirestore = `paises/${pais}/estados/${estado}/lumisial/${lumisial}`;

      const alunosCollection = collection(
        firestore,
        `${caminhoFirestore}/turmas/${turmaId}/alunos`
      );

      if (alunoId) {
        // Atualizar aluno existente
        // converter caminho para string antes de inserir ....
        // Certificar-se de que alunoId √© uma string
        const alunoIdStr = String(alunoId);

        const alunoDoc = doc(alunosCollection, alunoIdStr);
        //await setDoc(alunoDoc, { nome, whatsapp }, { merge: true }); // Merge para atualizar sem sobrescrever
        await setDoc(alunoDoc, { nome, codigoPais, whatsapp }, { merge: true });

        Alert.alert("Sucesso", "Aluno atualizado com sucesso!");
      } else {
        // Verificar √∫ltimo aluno e calcular pr√≥ximo ID
        const querySnapshot = await getDocs(alunosCollection);
        let novoId = "A001"; // ID inicial padr√£o

        if (!querySnapshot.empty) {
          const ids = querySnapshot.docs.map((doc) => doc.id);
          const ultimoId = ids.sort().pop(); // Obter o √∫ltimo ID
          if (ultimoId) {
            const numero = parseInt(ultimoId.replace("A", ""), 10) + 1;
            novoId = `A${String(numero).padStart(3, "0")}`; // Formatar com 3 d√≠gitos
          }
        }

        // Inserir novo aluno
        const novoAlunoRef = doc(alunosCollection, novoId);
        //await setDoc(novoAlunoRef, { nome, whatsapp });
        await setDoc(novoAlunoRef, { nome, codigoPais, whatsapp });

        // Adicionar presen√ßa para o novo aluno
        await adicionarPresencaParaAluno(novoId);

        Alert.alert("Sucesso", `Aluno ${novoId} inserido com sucesso!`);
      }

      // Redirecionar ap√≥s salvar
      router.push({
        pathname: "/ControleDePresenca",
        params: { turmaId },
      });
    } catch (error) {
      console.error("Erro ao salvar aluno:", error);
      //Alert.alert("Erro", "N√£o foi poss√≠vel salvar o aluno.");
    } finally {
      setLoading(false); // Desativa o loading
    }
  };

  // Fun√ß√£o para adicionar presen√ßa em todas as palestras da turma
  const adicionarPresencaParaAluno = async (alunoId: string) => {

    if (!turmaId || !palestraId) {
      //console.error("IDs de turma e palestra s√£o obrigat√≥rios. Verifique as informa√ß√µes.");
      return;
    }
    try {
      setLoading(true); // Ativa o loading
      const { pais, estado, lumisial } = await recuperarDadosDemograficos();
      // Montar o caminho no Firestore
      const caminhoFirestore = `paises/${pais}/estados/${estado}/lumisial/${lumisial}`;

      const palestrasCollection = collection(
        firestore,
        `${caminhoFirestore}/turmas/${turmaId}/palestras`
      );

      const palestrasSnapshot = await getDocs(palestrasCollection);
      if (!palestrasSnapshot.empty) {
        for (const palestraDoc of palestrasSnapshot.docs) {
          const palestraId = palestraDoc.id;
          const presencaRef = doc(
            firestore,
            `${caminhoFirestore}/turmas/${turmaId}/palestras/${palestraId}/presenca/${alunoId}`
          );
          await setDoc(presencaRef, { alunoId, status: "ausente" });
        }
        console.log(`Presen√ßas adicionadas para o aluno '${alunoId}' em todas as palestras.`);

        router.push({
          pathname: "/ControleDePresenca",
          params: {
            turmaId,
          },
        });
      }
    } catch (error) {
      console.error("Erro ao adicionar presen√ßas:", error);
    } finally {
      setLoading(false); // Desativa o loading
    }
  };

  // Carregar dados do aluno ao montar o componente
  useEffect(() => {
    const carregarCodigoPais = async () => {
      if (!codigoPais || codigoPais === "+55") {  // Evita sobrescrever o c√≥digo do pa√≠s se j√° estiver definido
        const dadosDemograficos = await recuperarDadosDemograficos();
        if (dadosDemograficos) {
          const paisEncontrado = paisesComCodigo.find((p) => p.nome === dadosDemograficos.pais);
          if (paisEncontrado) {
            setCodigoPais(paisEncontrado.codigo);
          }
        }
      }
    };

    carregarDadosAluno();
    carregarCodigoPais();
  }, [turmaId, alunoId]);


  return (
    <View style={globalStyles.container}>
      {/* Exibe o componente de loading quando necess√°rio */}
      {loading && <Loading />}

      {!loading && (
        <>
          <View style={{ flexDirection: "row", alignItems: "center", marginBottom: 5, marginLeft: 5 }}>
            <TouchableOpacity onPress={() => router.back()} style={{ marginBottom: 7, marginRight: 15 }}>
              <MaterialIcons name="arrow-back" size={28} color="#3498db" />
            </TouchableOpacity>
            <Text style={globalStyles.title}>{alunoId ? "Editar Aluno" : "Inserir Aluno"}</Text>
          </View>

          <Text style={globalStyles.text}>Nome do Aluno*</Text>
          <TextInput
            style={globalStyles.input}
            placeholder="Nome do Aluno"
            value={nome}
            onChangeText={setNome}
          />
          <Text style={globalStyles.text}>WhatsApp do Aluno*</Text>
          <View style={globalStyles.inputContainerPicker}>
            {/* Bandeira e Picker */}
            <View style={globalStyles.pickerWrapper}>
              <Text style={globalStyles.flag}>
                {paisesComCodigo.find(p => p.codigo === codigoPais)?.bandeira}
              </Text>
              <Picker
                selectedValue={codigoPais}  // Mova para o Picker
                onValueChange={(value) => setCodigoPais(value)}  // Mova para o Picker
                style={globalStyles.pickerPais}
              >
                {paisesComCodigo.map((pais) => (
                  <Picker.Item key={pais.codigo} label={`${pais.bandeira} ${pais.codigo}`} value={pais.codigo} />
                ))}
              </Picker>
            </View>

            {/* Campo de telefone */}
            <TextInput
              style={globalStyles.inputTelefone}
              placeholder="(21)98999-9999"
              value={whatsapp}
              onChangeText={(text) => setWhatsapp(text)}
              keyboardType="phone-pad"
            />
          </View>
          <Text>Todos os campos s√£o obrigat√≥rios.</Text>
          <TouchableOpacity style={globalStyles.button} onPress={handleAddAluno}>
            <Text style={globalStyles.buttonText}>Inserir Aluno</Text>
          </TouchableOpacity>

        </>
      )}

    </View>
  );
};

/*
const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: "#f9f9f9",
  },
  title: {
    fontSize: 24,
    fontWeight: "bold",
    textAlign: "center",
    marginBottom: 20,
  },
  input: {
    backgroundColor: "#fff",
    borderRadius: 8,
    padding: 15,
    marginBottom: 15,
    fontSize: 16,
    borderWidth: 1,
    borderColor: "#ccc",
  },
  buttonsContainer: {
    flexDirection: "row",
    justifyContent: "space-around",
    marginBottom: 20,
  },
  statusButton: {
    padding: 10,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: "#ccc",
    backgroundColor: "#f5f5f5",
    flex: 1,
    alignItems: "center",
    marginHorizontal: 5,
  },
  activeButton: {
    backgroundColor: "#4caf50",
  },
  buttonText: {
    color: "#fff",
    fontWeight: "bold",
  },
  submitButton: {
    backgroundColor: "#007bff",
    padding: 15,
    borderRadius: 8,
    alignItems: "center",
  },
  submitButtonText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "bold",
  },
});
*/

export default InserirAluno;